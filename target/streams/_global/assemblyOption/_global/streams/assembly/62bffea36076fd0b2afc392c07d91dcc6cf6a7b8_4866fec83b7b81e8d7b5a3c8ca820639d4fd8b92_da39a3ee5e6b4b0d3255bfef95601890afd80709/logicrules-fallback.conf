

rules {

  catalogs {
    c1: ["REPACTACION", "SUPER_AVANCE", "AVANCE_CAJA", "ADICIONAL", "PAT", "A", "B", "TRASPASO"]
  }

  channels {
    TEST {
      placements {
        recencia {
          recsNeeded: 1     # default, no sería necesario
          recsPriority: 0   # default, no sería necesario
          provider: "test_products"
          forceCatalog: "false"
        }
        fallback {
            recsNeeded: 1     # default, no sería necesario
            recsPriority: 0   # default, no sería necesario
            provider: "fallback_provider"
            forceCatalog: "false"
        }
        placementTest {
          recsNeeded: 1     # default, no sería necesario
          recsPriority: 0   # default, no sería necesario
          provider: "test_products"
          forceCatalog: "false"
        }
        placementTest_fallback {
          recsNeeded: 1     # default, no sería necesario
          recsPriority: 0   # default, no sería necesario
          provider: "fallback_provider_1"
          forceCatalog: "false"
        }
      }
    }

    TEST2 {
      placements {
        recencia2 {
          recsNeeded: 1     # default, no sería necesario
          recsPriority: 0   # default, no sería necesario
          provider: "test_products"
          forceCatalog: "false"
        }
        fallback {
            recsNeeded: 1     # default, no sería necesario
            recsPriority: 0   # default, no sería necesario
            provider: "fallback_provider"
            forceCatalog: "false"
        }
      }
    }


  }

  providers {

    test_products {
      providerType: "OrderedList"
      list: ["REPACTACION", "SUPER_AVANCE", "AVANCE_CAJA", "ADICIONAL"]
    }

    fallback_provider {
        providerType: "OrderedList"
        list: ["SUPER_AVANCE", "AVANCE_CAJA", "TRASPASO", "PAT"]
    }

    fallback_provider_1 {
        providerType: "OrderedList"
        list: ["A", "B"]
    }

  }


  rules: [
    {
      "id": "disableProductsRule",
      "classname": "ValueInList",
      "placements": ["fallback"],
      "affectedProducts": ["REPACTACION", "SUPER_AVANCE", "AVANCE_CAJA", "ADICIONAL", "PAT", "A", "B", "TRASPASO"],
      "blockIfNotPresent": false,
      "last": false,
      "parameterExpression": {
        "classname": "ParameterPrefix",
        "prefix": "enable"
      },
      "safelist": true,
      "values": [
        "true"
      ]
    },
    {
      "id": "recenciaREPA",
      "classname": "DateRule"
      "blockIfNotPresent": "false",
      "affectedProducts": ["REPACTACION"],
      "parameterExpression": {
        "classname": "ConstantExpression",
        "name": "fechaUltimoREPACTACION"
      },
      "dateValidation": {
          "classname": "SameMonth",
          "shouldBeTrue": false
      }
    }
  ]



  experiments {

    PruebaRecencia {

      classname: "ABTest"

      segment {
        classname: "RandomShare",
        #parentSegment {
        #  classname: "Everyone" # No es necesario especificarlo, es el default
        #}
        share: 0.2
      }

      expiration: "NeverEnding"

      controlGroup {

        name: "Grupo control"

        share: 0.5

        channels { # Al no especificar, se usan los mismos que en la configuración general
        }

        rules: [
          {
            "id": "disableProductsRule",
            "classname": "ValueInList",
            "affectedProducts": [],
            "blockIfNotPresent": false,
            "last": false,
            "parameterExpression": {
              "classname": "ParameterPrefix",
              "prefix": "enable"
            },
            "safelist": true,
            "values": [
              "true"
            ]
          },
          {
            "id": "recenciaREPA",
            "classname": "DateRule",
            "blockIfNotPresent": "false",
            "affectedProducts": ["REPACTACION"],
            "parameterExpression": {
              "classname": "ConstantExpression",
              "name": "fechaUltimoREPACTACION"
            },
            "dateValidation": {
              "classname": "SameMonth",
              "shouldBeTrue": false
            }
          }
        ]
      }


      testGroups: [
        {
          name: "Grupo prueba para recencias"

          share: 0.5

          channels {

          }

          rules: [
            {
              "id": "disableProductsRule",
              "classname": "ValueInList",
              "affectedProducts": [],
              "blockIfNotPresent": false,
              "last": false,
              "parameterExpression": {
                "classname": "ParameterPrefix",
                "prefix": "enable"
              },
              "safelist": true,
              "values": [
                "true"
              ]
            },
            {
              "id": "recenciaREPA",
              "classname": "DateRule",
              "blockIfNotPresent": "false",
              "affectedProducts": ["REPACTACION"],
              "parameterExpression": {
                "classname": "ConstantExpression",
                "name": "fechaUltimoREPACTACION"
              },
              "dateValidation": {
                "classname": "SameMonth",
                "shouldBeTrue": false
              }
            },
            {
              "id": "recenciaSAEAE",
              "classname": "DateRule",
              "blockIfNotPresent": "true",
              "affectedProducts": ["SUPER_AVANCE", "AVANCE_CAJA"],
              "parameterExpression": {
                "classname": "ParameterPrefix",
                "prefix": "fechaUltimo"
              }
              "dateValidation": {
                "classname": "DaysPassed",
                "days": 8
              }
            }
          ]
        }
      ]

    }
  }

}