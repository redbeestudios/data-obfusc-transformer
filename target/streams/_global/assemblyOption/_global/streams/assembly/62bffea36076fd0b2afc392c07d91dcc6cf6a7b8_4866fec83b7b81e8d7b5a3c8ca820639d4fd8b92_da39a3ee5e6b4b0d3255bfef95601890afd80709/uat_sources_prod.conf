
uat_sources_prod_nueva_infra {

  include "ofertador-defaults.conf"
  include "nueva-infra.conf"
  teradata {
    conversionEventsAccumulatorTable = "conversion_event_accumulator_test"
    conversionMonthsTable = "conversion_months_test"
  }

  config-server= "172.30.8.52"
  config-server-port = 32120

  config.files = ["api", "channel", "etl", "models", "sources", "spark", "tracker", "banner"]

  kafka {
    bootstrap.servers = "172.30.8.61:9092"
    # bootstrap.servers = "172.30.36.29:31092"
    topic-events = "tracking-events-topic"
  }

  influx.database {
    name = "eventsDB"
    host = "172.30.81.197"
    port = 8086
    #host = "172.18.171.223"
    #port = 32128

  }
  cat.read {
    # Conexion a DB CATF
    user = "user_etlofer"
    password = "ydhmmv65#aew346"
    url = "jdbc:postgresql://172.30.11.70:5432/dbcat"
    driver = "org.postgresql.Driver"
    batchsize = 200  # number of rows per insert (Spark)
    customBatchsize = 2  # numero de filas por insert
    isolationLevel = "READ_UNCOMMITTED"  # "NONE", "READ_COMMITTED", "READ_UNCOMMITTED" (default), "REPEATABLE_READ", "SERIALIZABLE"
    maximumPoolSize = 2  # connection pool de postgres
  }

  cat.write {
    # Conexion a DB CAT
    user = "admdbcat"
    password = "admdbcat"
    url = "jdbc:postgresql://172.18.171.231:5432/dbcat_og"
    driver = "org.postgresql.Driver"
    batchsize = 200  # number of rows per insert (Spark)
    customBatchsize = 2  # numero de filas por insert
    isolationLevel = "READ_UNCOMMITTED"  # "NONE", "READ_COMMITTED", "READ_UNCOMMITTED" (default), "REPEATABLE_READ", "SERIALIZABLE"
    maximumPoolSize = 2  # connection pool de postgres
  }
  redis {
    readTimeout = 240
    redis-sentinel = {

      sentinels: ["172.30.8.64:26379","172.30.8.65:26379"]//, "172.30.8.63:26379"]
      masterName = "mymaster"
    }

    redis-instances = [
      {
        host="172.30.8.64"
        port="6379"
      }
      {
        host="172.30.8.65"
        port="6379"
      }
      //      {
      //        host="172.30.8.65"
      //        port="6379"
      //      }
    ]
    pool-config {
      maxTotal = 128
      maxIdle = 128
      minIdle = 16
      testOnBorrow = true
      testOnReturn = true
      testWhileIdle = true
      minEvictableIdleTimeSeconds = 60
      timeBetweenEvictionRunsSeconds = 30
      numTestsPerEvictionRun = 3
      blockWhenExhausted = true
      maxWaitSeconds = 256
    }
  }

  green {
    redis {
      readTimeout = 240
      redis-sentinel = {

        sentinels: ["172.30.8.64:26380","172.30.8.65:26380"]//, "172.30.8.63:26379"]
        masterName = "mymaster"
      }

      redis-instances = [
        {
          host="172.30.8.64"
          port="6380"
        }
        {
          host="172.30.8.65"
          port="6380"
        }
        //        {
        //          host="172.30.8.65"
        //          port="6379"
        //        }
      ]
      pool-config {
        maxTotal = 128
        maxIdle = 128
        minIdle = 16
        testOnBorrow = true
        testOnReturn = true
        testWhileIdle = true
        minEvictableIdleTimeSeconds = 60
        timeBetweenEvictionRunsSeconds = 30
        numTestsPerEvictionRun = 3
        blockWhenExhausted = true
        maxWaitSeconds = 256
      }
    }
  }

  blue {
    redis {
      readTimeout = 240
      redis-sentinel = {

        sentinels: ["172.30.8.64:26379","172.30.8.65:26379"]//, "172.30.8.63:26379"]
        masterName = "mymaster"
      }
      redis-instances = [
        {
          host="172.30.8.64"
          port="6379"
        }
        {
          host="172.30.8.65"
          port="6379"
        }
        //        {
        //          host="172.30.8.65"
        //          port="6379"
        //        }
      ]
      pool-config {
        maxTotal = 128
        maxIdle = 128
        minIdle = 16
        testOnBorrow = true
        testOnReturn = true
        testWhileIdle = true
        minEvictableIdleTimeSeconds = 60
        timeBetweenEvictionRunsSeconds = 30
        numTestsPerEvictionRun = 3
        blockWhenExhausted = true
        maxWaitSeconds = 256
      }
    }
  }
}
