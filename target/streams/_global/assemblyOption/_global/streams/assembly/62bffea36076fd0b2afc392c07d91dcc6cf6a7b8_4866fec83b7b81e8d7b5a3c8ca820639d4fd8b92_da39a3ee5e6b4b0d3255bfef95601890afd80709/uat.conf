
uat {
  include "ofertador-defaults.conf"
  ms-ofertas: {
    url: "http://172.30.81.196:32040/api/v1.0/clientes/:rut/ofertas-preaprobadas-ofertador"
    token : {
      url = "https://apiuatog.rfsc.cl/api/v1.0/sec/oauth2/token"
      getTokenHeaders = [
        "Content-Type=application/json"
      ]
      getTokenBody = [
        "grant_type=client_credentials",
        "client_id=client_microsoft",
        "client_secret=client_microsoft_secret"
      ]
      headers = [
        "Content-Type=application/json",
        "X-Request-ID=9e60c33f-0049-46f6-9a19-b38654021694",
        "Authorization=Bearer ",
        "api_key=123",
        "x-canal-id=120",
        "x-usuario-id=96",
        "x-cliente-id=-CHL-1",
        "x-Rol-principal=Rol Atencion al Cliente",
        "x-ip=127.0.0.1"
      ]
      body = [
        "autorizado=string"
      ]
    }
    sesion: {
      url = "https://apiuatog.rfsc.cl/api/v1.0/sesiones" #"http://172.26.230.165:32012/api/v1.0/sesiones/"
      body = [
        "nivel_actual=1",
        "nivel_requerido=4",
        "factor_utilizado=Control Dual",
        "id_toc=string"
      ]
    }
    aprobadas: {
      url = "https://apiuatog.rfsc.cl/api/v1.0/clientes/:rut/ofertas"
      headers = [
        "Content-Type=application/json",
        "X-Request-ID=9e60c33f-0049-46f6-9a19-b38654021694",
        "Authorization=Bearer ",
        "api_key=123",
        "x-canal-id=120",
        "x-usuario-id=96",
        "x-cliente-id=-CHL-1",
        "x-Rol-principal=Rol Atencion al Cliente",
        "x-ip=127.0.0.1"
      ]
    }
    token.scheduler = 18000
    crmOfertasCodes = {
      IMPORTANTE: [70]
      SUPER_AVANCE: [48]
      AVANCE_CAJA: [49]
      TRASPASO: [62]
      AUMENTO_CUPO: [52]
    }
  }

  config.files = ["api", "channel", "etl", "models", "sources", "spark", "tracker", "banner", "bizrules"]

  hdfs-namenode = "hdfs://namenode:8020/"

  k8s {
    context = "UAT-OG"
    namespace = "ofertador"
    pod {
      prefix = "ofertador-api"
    }
    deployment {
      name = "ofertador-api"
    }
  }

  
  prediction.model.root = "models:"
  prediction.model.root = ${?PREDICTION_MODEL_ROOT}

  massive {
    evaluation {
      step = 1000
      longstep = 20000
      casosXDemografia = 10
      timeout = 1
    }
  }

  config-server= "127.0.0.1"
  config-server-port = 18887

  kafka {
    bootstrap.servers = "we-uat-ofertador-rg.servicebus.windows.net:9093"
    username = "$ConnectionString"
    password = "Endpoint=sb://we-uat-ofertador-rg.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=E3S/o/oGrSeHyfq9SljxdWbTtcc/b1LjUTfLd95y15o="
    topic-events = "tracking-events-topic"
  }

  modelTunning {
    logisticRegressionParams {
      maxIterations = 10
      tolerance = 1E-6
      fitIntercept = true
    }
  }

  influx.database {
    name = "eventsDB"
    host = "172.30.36.27"
    port = 32128
    #host = "172.18.171.223"
    #port = 32128

  }
  cat.read {
    # Conexion a DB CAT
    user = "admdbcat"
    password = "admdbcat"
    url = "jdbc:postgresql://172.18.171.231:5432/dbcat_og"
    driver = "org.postgresql.Driver"
    batchsize = 200  # number of rows per insert (Spark)
    customBatchsize = 2  # numero de filas por insert
    isolationLevel = "READ_UNCOMMITTED"  # "NONE", "READ_COMMITTED", "READ_UNCOMMITTED" (default), "REPEATABLE_READ", "SERIALIZABLE"
    maximumPoolSize = 2  # connection pool de postgres
  }

  cat.write {
    # Conexion a DB CAT
    user = "admdbcat"
    password = "admdbcat"
    url = "jdbc:postgresql://172.18.171.231:5432/dbcat_og"
    driver = "org.postgresql.Driver"
    batchsize = 200  # number of rows per insert (Spark)
    customBatchsize = 2  # numero de filas por insert
    isolationLevel = "READ_UNCOMMITTED"  # "NONE", "READ_COMMITTED", "READ_UNCOMMITTED" (default), "REPEATABLE_READ", "SERIALIZABLE"
    maximumPoolSize = 2  # connection pool de postgres
  }

  teradata {
    env_id = "test"
    include "teradata-desa.conf"
  }

  redis {
    readTimeout = 120
    redis-instances = [
      {
        host="we-uat-ofertador-rg.redis.cache.windows.net"
        port="6379"
        password="ydr1QDQhRkP807CHEcL7eCcdtoonr+8fQY0I1PrF85M="
      }
    ]
    pool-config {
      maxTotal = 128
      maxIdle = 128
      minIdle = 16
      testOnBorrow = true
      testOnReturn = true
      testWhileIdle = true
      minEvictableIdleTimeSeconds = 60
      timeBetweenEvictionRunsSeconds = 30
      numTestsPerEvictionRun = 3
      blockWhenExhausted = true
      maxWaitSeconds = 128
    }
  }

  green {
    redis {
      readTimeout = 120
      redis-instances = [
        {
          host = "we-uat-ofertador-green.redis.cache.windows.net"
          port = "6379"
          password = "mKZr94g5Xf3NopqhmAB2sQuZunFsEBeCABAIOH25qW0="
        }
      ]
      pool-config {
        maxTotal = 128
        maxIdle = 128
        minIdle = 16
        testOnBorrow = true
        testOnReturn = true
        testWhileIdle = true
        minEvictableIdleTimeSeconds = 60
        timeBetweenEvictionRunsSeconds = 30
        numTestsPerEvictionRun = 3
        blockWhenExhausted = true
        maxWaitSeconds = 128
      }
    }
  }

  blue {
    redis {
      readTimeout = 120
      redis-instances = [
        {
          host = "we-uat-ofertador-rg.redis.cache.windows.net"
          port = "6379"
          password = "ydr1QDQhRkP807CHEcL7eCcdtoonr+8fQY0I1PrF85M="
        }
      ]
      pool-config {
        maxTotal = 128
        maxIdle = 128
        minIdle = 16
        testOnBorrow = true
        testOnReturn = true
        testWhileIdle = true
        minEvictableIdleTimeSeconds = 60
        timeBetweenEvictionRunsSeconds = 30
        numTestsPerEvictionRun = 3
        blockWhenExhausted = true
        maxWaitSeconds = 128
      }
    }
  }


  error-reporting {
    # Directorios donde se van a generar los dos archivos de error (por jobName)
    rootPath = "/tmp"
  }

  // num of spark partitions
  spark {
    num_partitions  = 10
    app {
      name = "spark-etl-cctaf02"
    }
  }

  elastic {
    host = "localhost"
    port = 9200
    db = "cencosud_index"
  }

  path_prefix = "."


  channels {
    codcom-instances = [
      {
        codigocomercio = [
          4905,4906,4907,4908,4909,4910,4911,4915,4916,4918,4919,4921,4923,4924,
          5639,9001,9002,9004,9005,9007,9010,9013,9016,9017,9019,9020,9021,9022,
          9023,9025,9026,9030,9032,9037,9038,9039,9040,9041,9044,9060,9064,9101,
          9102,9103,9104,5622875,8639132,17925768,17925776,25009924,25009924,
          25057112,27045537,27058566,27066402,27089070,27089119,27116868,
          27175430,27193005,27365906,27803695,27976247,28088744,28413378,
          28448031,28552327,28573871,28603347,28674732,28733488,28881568,
          28881592,28996411,29016275,29112274,29492190,29568421,29568634,
          29569096,29597022,29708169,29708185,29982406,30028732,30112210,
          30258177,30398750,32361609,32385435,32860869
        ]
        canal = "Paris"
      },
      {
        codigocomercio = [
          1029,1198,2751,2752,2754,2993,4236,4237,4238,4239,4240,4241,4242,4244,
          4801,4803,4804,4805,4806,4811,4812,4815,4825,4826,4828,4829,4831,4832,
          4834,4837,4839,4840,4842,4843,4844,4845,4851,4853,4854,4855,4857,4861,
          4864,4865,4866,4867,4868,5293,7690,8384,8386,8387,8390,8391,8392,8393,
          8394,8395,8437,838000,838300,838400,838500
        ]
        canal = "Jumbo"
      },
      {
        codigocomercio = [
          1116,1138,1272,2761,2762,4802,4807,4808,4809,4810,4813,4814,4816,4817,
          4818,4819,4820,4821,4822,4824,4827,4833,4835,4836,4838,4841,4846,4847,
          4848,4849,4850,4852,4856,4858,4859,4860,4862,4863,5822,8401,8402,8413,
          8414,8415,8416
        ]
        canal = "Easy"
      },
      {
        codigocomercio = [
          1032,1118,1125,1127,1129,1131,1191,1235,1236,1253,1416,2756,2757,2758,
          2759,2760,2766,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,
          2811,2812,2813,2814,2815,2816,3500,3501,3502,3503,3504,3505,3506,3507,
          3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,3518,3519,3520,3521,
          3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,
          3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,
          3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,
          3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576,3577,
          3579,3580,3581,3582,3583,3584,3585,3586,3587,3588,3589,3590,3591,3592,
          3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,
          3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,
          3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3635,
          3636,3642,3647,3648,3649,3652,4231,4501,4502,4503,4504,4505,4506,4507,
          4508,4509,4510,4511,4512,4513,4514,4515,5421,5423,5424,5426,5429,5801,
          5802,5803,5804,5805,5806,5807,5808,5809,5810,5811,5812,5813,5814,5815,
          5816,5817,5818,5819,5820,5823,7681,7682,7744,8106,8380,8381,8382,8383,
          8385,8418,8424,8429,8430,8431,8432,8433,8434,8435,8436,8438,8439,8440,
          8441,8442,8443,8445,8489,8512,8520,8624
        ]
        canal = "Santa_Isabel"
      },
      {
        codigocomercio = [
          1438,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,8453,8454,
          8455,8456,8457,8458,8459,8460,8461,8462,8463,8464,8465,8466,8467,8468,
          8469,8471,8472,8473,8474,8475,8476,8477,8478,8479,8480,8481,8482,8483,
          8484,7911955,7931808,7961952,15944870,15944889,16909645,16947016,17923552,
          17955861,17962922,18913089,25006925,25006933,25006941,25052587,25115465,
          25147979,25147987,27003737,27018785,27048013,27285430,27629709,27768768,
          27866689,27887376,27892566,27940846,28090455,28409966,28579330,28587341,
          28610831,28623879,28623968,28875665,29115540
        ]
        canal = "Johnson"
      },
      {
        codigocomercio = [
          5092,5093,5094,5109,5095,5096,5097
        ]
        canal = "SSTT"
      },
      {
        codigocomercio = [5104,5110]
        canal = "Tac"
      },
      {
        codigocomercio = [
          5098,5099,5100,5111,7650,5101,5102,5103,5112
        ]
        canal = "Telefonico"
      },
      {
        codigocomercio = [
          1795,5575,5576,5587,5030,5031,5032,5033
        ]
        canal = "Web"
      }
    ]
  }

}
